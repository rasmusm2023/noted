rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if user owns the parent list
    function ownsParentList(listId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/lists/$(listId)) &&
        isOwner(get(/databases/$(database)/documents/lists/$(listId)).data.userId);
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Prevent user deletion through client
    }

    // Lists collection rules
    match /lists/{listId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // List items collection rules
    match /lists/{listId}/items/{itemId} {
      allow read: if ownsParentList(listId);
      allow create: if ownsParentList(listId);
      allow update, delete: if ownsParentList(listId);
    }

    // Tasks collection rules
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        (resource.data.goalIds != null && 
        resource.data.goalIds.size() > 0 && 
        resource.data.goalIds.hasAny([request.auth.uid]))
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
      // Allow batch operations for tasks
      allow write: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isOwner(request.resource.data.userId)
      );
      // Allow querying by goalIds
      allow list: if isAuthenticated() && (
        request.query.filters.size() == 1 &&
        request.query.filters[0].field == "goalIds" &&
        request.query.filters[0].op == "array-contains"
      );
    }

    // Saved Tasks collection rules
    match /savedTasks/{taskId} {
      // Allow read if user is authenticated and owns the task
      allow read: if isAuthenticated() && (
        !exists(resource) || 
        isOwner(resource.data.userId)
      );
      
      // Allow create if user is authenticated and sets themselves as owner
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      
      // Allow update if user is authenticated and owns the task
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      
      // Allow delete if user is authenticated and owns the task
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);

      // Allow querying by originalTaskId
      allow list: if isAuthenticated() && (
        request.query.filters.size() == 1 &&
        request.query.filters[0].field == "originalTaskId" &&
        request.query.filters[0].op == "==" &&
        isOwner(resource.data.userId)
      );
    }

    // Timestamps collection rules
    match /timestamps/{timestampId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Titles collection rules
    match /titles/{titleId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Sections collection rules
    match /sections/{sectionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
      // Allow batch operations for sections
      allow write: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isOwner(request.resource.data.userId)
      );
    }

    // Goals collection rules
    match /goals/{goalId} {
      // Allow read if user is authenticated and owns the goal
      allow read: if isAuthenticated() && (
        !exists(resource) || 
        isOwner(resource.data.userId)
      );
      
      // Allow create if user is authenticated and sets themselves as owner
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      
      // Allow update if user is authenticated and owns the goal
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      
      // Allow delete if user is authenticated and owns the goal
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}